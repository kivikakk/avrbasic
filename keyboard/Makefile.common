# This makefile take each "at*" file, extracts it's part name
# And compile it into an ELF binary.
# It also disassemble it for debugging purposes.
#
# The code is compiled "optimized" to the max.
#
# The weird "-Wl,--undefined=_mmcu,--section-start=.mmcu=0x910000"
# is used to tell the linker not to discard the .mmcu section,
# otherwise the --gc-sections will delete it.

# export CC=clang
# export CFLAGS=-march=corei7-avx

# get the first character of what the compiler says it is, unless it's 'x86_64' doh
ARCH 		:= ${shell $(CC) -dumpmachine | sed -e 's/^x/i/' -e 's/\(.\).*/\1/'}

CFLAGS		+= -O2 -Wall -Wextra -Wno-unused-parameter \
			-Wno-unused-result -Wno-missing-field-initializers \
			-Wno-sign-compare
CFLAGS		+= -g
CORE_CFLAGS	= -DAVR_CORE=1

ifeq (${shell uname}, Darwin)
 # gcc 4.2 from MacOS is really not up to scratch anymore
 CC			= clang
 AVR_ROOT 	:= "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/"
 AVR 		:= ${AVR_ROOT}/bin/avr-
 # Thats for MacPorts libelf
 ifeq (${shell test -d /opt/local && echo Exists}, Exists)
  ifneq (${shell test -d /opt/local/avr && echo Exists}, Exists)
   $(error Please install avr-gcc: port install avr-gcc avr-libc)
  endif
  ifneq (${shell test -d /opt/local/include/libelf && echo Exists}, Exists)
   $(error Please install libelf: port install libelf)
  endif
  CC		= clang
  IPATH		+= /opt/local/include /opt/local/include/libelf
  LFLAGS	= -L/opt/local/lib/
  AVR 		:= /opt/local/bin/avr-
 else
  # That's for Homebrew libelf and avr-gcc support
  HOMEBREW_PREFIX ?= /usr/local
  ifeq (${shell test -d $(HOMEBREW_PREFIX)/Cellar && echo Exists}, Exists)
   ifneq (${shell test -d $(HOMEBREW_PREFIX)/Cellar/avr-gcc/ && echo Exists}, Exists)
    $(error Please install avr-gcc: brew tap osx-cross/homebrew-avr ; brew install avr-libc)
   endif
   ifneq (${shell test -d $(HOMEBREW_PREFIX)/Cellar/libelf/ && echo Exists}, Exists)
    $(error Please install libelf: brew install libelf)
   endif
   CC			= clang
   IPATH		+= $(HOMEBREW_PREFIX)/include
   LFLAGS		= -L$(HOMEBREW_PREFIX)/lib/
   CFLAGS		+= -I/$(HOMEBREW_PREFIX)/include/libelf
   AVR_ROOT		:= $(firstword $(wildcard $(HOMEBREW_PREFIX)/Cellar/avr-libc/*/))
   AVR			:= $(HOMEBREW_PREFIX)/bin/avr-
  endif
 endif
else
 AVR 		:= avr-
endif

# FIXME uname -o doesn't work on bsd derivatives
#WIN := ${shell uname -o}

ifeq (${WIN}, Msys)
AVR_ROOT    := ${shell echo "${AVR32_HOME}" | tr '\\' '/'}
AVR         := ${AVR_ROOT}/bin/avr-
IPATH       += ${PREFIX}/include
CFLAGS      += -I${PREFIX}/include
LDFLAGS		+= -L/lib -L/local/lib
CFLAGS 		+= -DNO_COLOR
else
CFLAGS 		+= -fPIC
endif

CPPFLAGS	+= --std=gnu99 -Wall
CPPFLAGS	+= ${patsubst %,-I%,${subst :, ,${IPATH}}}

AVR_CPPFLAGS	= ${CPPFLAGS} -I${SIMAVR}/cores

CC 			?= clang
AR 			?= ar
RANLIB 		?= ranlib
MKDIR		?= mkdir -p
INSTALL		?= install
SHELL	 	:= ${shell which bash}

LDFLAGS 	+= -L${LIBDIR} -lsimavr -lm

LDFLAGS 	+= -lelf

ifeq (${WIN}, Msys)
LDFLAGS      += -lws2_32
endif

ifeq (${shell uname}, Linux)
ifeq ($(RELEASE),1)
# allow the shared library to be found in the build directory
# only for linking, the install time location is used at runtime
LFLAGS		+= -Wl,-rpath-link,${LIBDIR}
else
# allow the shared library to be found in the build directory
LFLAGS		+= -Wl,-rpath,${LIBDIR}
endif
endif

ifeq (${V}, 1)
E		=
else
E		= @
endif

%.hex: %.axf
	@${AVR}objcopy -j .text -j .data -j .eeprom -O ihex ${<} ${@}

%.s: %.axf
	@${AVR}objdump -j .text -j .data -j .bss -d  ${<} > ${@}

# --mcall-prologues can be used here, but messes up debugging a little
%.o: %.c
	@part=atmega8; \
	${AVR}gcc -Wall -gdwarf-2 -Os -std=gnu99 \
			-mmcu=$$part \
			-DF_CPU=8000000 \
			-fno-inline-small-functions \
			-ffunction-sections -fdata-sections \
			-Wl,--relax,--gc-sections \
			-Wl,--undefined=_mmcu,--section-start=.mmcu=0x910000 \
			${CPPFLAGS} \
			-c \
			${^} -o ${@}
	@${AVR}size ${@}|sed '1d'
